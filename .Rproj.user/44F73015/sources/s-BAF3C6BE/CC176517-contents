#### R script that compiles
#
# Ben.Block@tetratech.com, Date completed: 2022-03-22
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# R version 4.1.2 (2021-11-01) -- "Bird Hippie"

#clear global environment
rm(list=ls())

# load libraries
library(tidyverse)
library(readxl)

# Declare directories ####
wd <- getwd()
input.dir <- "Input_Data"
fn.data1 <- "MA_Lake_probe_summary_data_20220524.xlsx"
fn.data2 <- "MA_Lake_LabDataMain_20220407.xlsx"
fn.data3 <- "MA_Lake_WRATS_20220408.xlsx"
fn.data4 <- "WQP_Lake_Data_Trimmed_20220502.xlsx"
fn.data5 <- "NLA_Data_MA_QCed_20220325.xlsx"
fn.data6 <- "MA_LAGOS_epi_nutr_Long_20220324.xlsx"
# fn.data7 <- "DCR_Quabbin_tblResFieldParameters-2008-2014-Rpt75.xlsx"
# fn.data8 <- "DCR_Quabbin_tblResFieldParameters-2015-2019-Rpt75.xlsx"
fn.data9 <- "MA_WQ_Units_20220412.xlsx"
fn.data10 <- "Stations_All_Lakes_Streams_COMID.xlsx"
fn.data11 <- "MA_LakeCat_DistCat_Compiled_20220503.xlsx"
fn.data12 <- "MA_WQ_Unique_Lake_WaterbodyType_20220524.xlsx"
output.dir <- "/Output_Data/"
myDate <- format(Sys.Date(), "%Y%m%d")
results.dir <- paste0("/MA_WQ_Compiled_",myDate,"/")

# create results folder
boo_Results <- dir.exists(file.path(wd, output.dir, results.dir))
if(boo_Results==FALSE){
  dir.create(file.path(wd, output.dir, results.dir))
}

# Read data files ####
df_probedata <- read_excel(file.path(wd,input.dir, fn.data1)
                          , na = c("NA",""), trim_ws = TRUE, skip = 0
                          , col_names = TRUE, guess_max = 100000)

df_labmain  <- read_excel(file.path(wd,input.dir, fn.data2)
                          , na = c("NA",""), trim_ws = TRUE, skip = 0
                          , col_names = TRUE, guess_max = 100000)

df_WRATS  <- read_excel(file.path(wd,input.dir, fn.data3)
                        , na = c("NA",""), trim_ws = TRUE, skip = 0
                        , col_names = TRUE, guess_max = 100000)

df_WQP  <- read_excel(file.path(wd,input.dir, fn.data4)
                      , na = c("NA",""), trim_ws = TRUE, skip = 0
                      , col_names = TRUE, guess_max = 150000)

df_NLA  <- read_excel(file.path(wd,input.dir, fn.data5)
                           , na = c("NA",""), trim_ws = TRUE, skip = 0
                           , col_names = TRUE, guess_max = 150000)

df_LAGOSNE  <- read_excel(file.path(wd,input.dir, fn.data6)
                           , na = c("NA",""), trim_ws = TRUE, skip = 0
                           , col_names = TRUE, guess_max = 150000)
# 
# df_Res2014  <- read_excel(file.path(wd,input.dir, fn.data7)
#                            , na = c("NA",""), trim_ws = TRUE, skip = 0
#                            , col_names = TRUE, guess_max = 150000)
# 
# df_Res2019  <- read_excel(file.path(wd,input.dir, fn.data8)
#                            , na = c("NA",""), trim_ws = TRUE, skip = 0
#                            , col_names = TRUE, guess_max = 150000)

df_LakeUnits <- read_excel(file.path(wd,input.dir, fn.data9),sheet = "Lake Units"
                           , na = c("NA",""), trim_ws = TRUE, skip = 0
                           , col_names = TRUE, guess_max = 150000) 

df_COMIDs  <- read_excel(file.path(wd,input.dir, fn.data10)
                         , na = c("NA",""), trim_ws = TRUE, skip = 0
                         , col_names = TRUE, guess_max = 1000)

df_DistCat  <- read_excel(file.path(wd,input.dir, fn.data11)
                         , na = c("NA",""), trim_ws = TRUE, skip = 0
                         , col_names = TRUE, guess_max = 2000)

df_WaterbodyType  <- read_excel(file.path(wd,input.dir, fn.data12)
                          , na = c("NA",""), trim_ws = TRUE, skip = 0
                          , col_names = TRUE, guess_max = 2000)

# trim data files ####
## df_probedata ####
df_probe_trim <- df_probedata %>%
  select(-c(Month, Year, Dataset))

## df_labmain ####
vars_keep <- c("ID"
               ,"Tt_ActivityID"
               ,"UNIQUE_ID"
               ,"Waterbody"
               ,"MLTYP_NAME"
               ,"Latitude"
               ,"Longitude"
               ,"StartDate"
               ,"nMAXDEPTH"
               ,"Depth_Sample"
               ,"Depth_SampleStart"
               ,"Depth_SampleEnd"
               ,"nSECCHI"
               ,"Depth_Unit"
               ,"DWM_Units"
               ,"Parameter_Tt"
               ,"Fraction_Tt"
               ,"Result_Value_Tt"
               ,"QC_Flag_Tt")

df_labmain_trim <- df_labmain %>% 
  select(one_of(vars_keep))

## df_WRATS ####
vars_keep <- c("Tt_UniqueID"
               ,"ACTIVITY_CD"
               ,"STATION_CD"
               ,"rWBNAME"
               ,"MLTYP_NAME"
               ,"Latitude"
               ,"Longitude"
               ,"ACTIVITY_START_DATE"
               ,"STATION_MAXIMUM_DEPTH"
               ,"Probe_Depth"
               ,"SECCHI_DEPTH"
               ,"Depth_Units"
               ,"UNITS_CODE"
               ,"Parameter_Tt"
               ,"SAMPLE_FRACTION"
               ,"Result_Value_Tt"
               ,"DWM_QUAL")

df_WRATS_trim <- df_WRATS %>% 
  select(one_of(vars_keep))

## df_WQP ####
vars_keep <- c("Tt_UniqueID"
               ,"ActivityIdentifier"
               ,"MonitoringLocationIdentifier"
               ,"MonitoringLocationName"
               ,"ActivityLocation/LatitudeMeasure"
               ,"ActivityLocation/LongitudeMeasure"
               ,"ActivityStartDate"
               ,"DepthValue"
               ,"ActivityStartDepthValue"
               ,"ActivityEndDepthValue"
               ,"DepthUnit"
               ,"Unit_Tt"
               ,"CharacteristicName"
               ,"ResultSampleFractionText"
               ,"Result_Value_Tt"
               ,"QC_Flag_Tt")

df_WQP_trim <- df_WQP %>% 
  select(one_of(vars_keep)) %>% 
  filter(CharacteristicName != "Depth, bottom"
         & CharacteristicName != "Depth, Secchi disk depth"
         & CharacteristicName != "Depth")

df_WQP_depth <- df_WQP %>% 
  select(MonitoringLocationIdentifier, ActivityStartDate
         , CharacteristicName, Result_Value_Tt) %>% 
  filter(CharacteristicName == "Depth, Secchi disk depth") %>% 
  drop_na(Result_Value_Tt) %>%
  group_by(MonitoringLocationIdentifier, ActivityStartDate
           , CharacteristicName) %>% 
  summarize(Result_Value = mean(Result_Value_Tt)) %>% 
  pivot_wider(names_from = CharacteristicName, values_from = Result_Value) %>% 
  rename(Depth_Secchi = `Depth, Secchi disk depth`)

df_WQP_trim2 <- left_join(df_WQP_trim, df_WQP_depth
                          , by = c("MonitoringLocationIdentifier"
                                   , "ActivityStartDate"))


## df_NLA ####
vars_keep <- c("Tt_UniqueID"
               ,"Tt_SamplingID"
               ,"SiteID_NLA"
               ,"LakeName"
               ,"LakeType"
               ,"Lat"
               ,"Long"
               ,"Date"
               ,"LakeArea_sqKm"
               ,"Area_Unit"
               ,"Unit"
               ,"Parameter"
               ,"value")

df_NLA_trim <- df_NLA %>% 
  select(one_of(vars_keep))

## df_LAGOSNE ####
vars_keep <- c("Tt_UniqueID"
               ,"eventida10873"
               ,"lagoslakeid"
               ,"lagosname1"
               ,"nhd_lat"
               ,"nhd_long"
               ,"sampledate"
               ,"maxdepth"
               ,"Depth_Unit"
               ,"Unit"
               ,"Parameter"
               ,"Value"
               ,"QC_Flag_Tt")

df_LAGOSNE_trim <- df_LAGOSNE %>% 
  select(one_of(vars_keep)) %>% 
  filter(Parameter != "secchi")

df_LAGOSNE_depth <- df_LAGOSNE %>% 
  select(eventida10873, sampledate, Parameter, Value) %>% 
  filter(Parameter == "secchi") %>% 
  drop_na(Value) %>% 
  pivot_wider(names_from = Parameter, values_from = Value)

df_LAGOSNE_trim2 <- left_join(df_LAGOSNE_trim, df_LAGOSNE_depth
                              , by = c("eventida10873", "sampledate")) %>% 
  rename(Depth_Secchi = secchi)

## df_Res2014 ####
# vars_keep <- c("SampleID"
#                ,"Tt_ActivityID"
#                ,"StationID"
#                ,"Waterbody"
#                ,"Latitude"
#                ,"Longitude"
#                ,"SampleDate"
#                ,"Depth_Sample"
#                ,"Depth_Unit"
#                ,"Units"
#                ,"Analyte"
#                ,"Result")
# 
# df_Res2014_trim <- df_Res2014 %>% 
#   select(one_of(vars_keep))

## df_Res2019 ####
# vars_keep <- c("SampleID"
#                ,"Tt_ActivityID"
#                ,"StationID"
#                ,"Waterbody"
#                ,"Latitude"
#                ,"Longitude"
#                ,"SampleDate"
#                ,"Depth_Sample"
#                ,"Depth_Unit"
#                ,"Units"
#                ,"Analyte"
#                ,"Result"
#                ,"QC_Flag_Tt")
# 
# df_Res2019_trim <- df_Res2019 %>% 
#   select(one_of(vars_keep))


# rename column names ####
## df_discrete ####
# df_discrete_rename <- df_discrete_trim %>% 
#   rename(UniqueID = Tt_UniqueID
#          , ActivityID = ID
#          , StationID = UNIQUE_ID
#          , WaterbodyName = Waterbody
#          , WaterbodyType = MLTYP_NAME
#          , SampleDate = dDATE
#          , Depth_Sample = nDEPTH)

## df_labmain ####
df_labmain_rename <- df_labmain_trim %>% 
  rename(UniqueID = ID
         , ActivityID = Tt_ActivityID
         , StationID = UNIQUE_ID
         , WaterbodyName = Waterbody
         , WaterbodyType = MLTYP_NAME
         , SampleDate = StartDate
         , Depth_Max = nMAXDEPTH
         , Depth_Secchi = nSECCHI
         , Unit = DWM_Units
         , Parameter = Parameter_Tt
         , Fraction = Fraction_Tt
         , Result_Value = Result_Value_Tt
         , QC_Flag = QC_Flag_Tt)

## df_WRATS ####
df_WRATS_rename <- df_WRATS_trim %>% 
  rename(UniqueID = Tt_UniqueID
         , ActivityID = ACTIVITY_CD
         , StationID = STATION_CD
         , WaterbodyName = rWBNAME
         , WaterbodyType = MLTYP_NAME
         , SampleDate = ACTIVITY_START_DATE
         , Depth_Max = STATION_MAXIMUM_DEPTH
         , Depth_Sample = Probe_Depth
         , Depth_Secchi = SECCHI_DEPTH
         , Depth_Unit = Depth_Units
         , Unit = UNITS_CODE
         , Parameter = Parameter_Tt
         , Fraction = SAMPLE_FRACTION
         , Result_Value = Result_Value_Tt
         , QC_Flag = DWM_QUAL)

## df_WQP ####
df_WQP_rename <- df_WQP_trim2 %>% 
  rename(UniqueID = Tt_UniqueID
         , ActivityID = ActivityIdentifier
         , StationID = MonitoringLocationIdentifier
         , WaterbodyName = MonitoringLocationName
         , Latitude = `ActivityLocation/LatitudeMeasure`
         , Longitude = `ActivityLocation/LongitudeMeasure`
         , SampleDate = ActivityStartDate
         , Depth_Sample = DepthValue
         , Depth_SampleStart = ActivityStartDepthValue
         , Depth_SampleEnd = ActivityEndDepthValue
         , Depth_Unit = DepthUnit
         , Unit = Unit_Tt
         , Parameter = CharacteristicName
         , Fraction = ResultSampleFractionText
         , Result_Value = Result_Value_Tt
         , QC_Flag = QC_Flag_Tt)

## df_NLA ####
df_NLA_rename <- df_NLA_trim %>% 
  rename(UniqueID = Tt_UniqueID
         , ActivityID = Tt_SamplingID
         , StationID = SiteID_NLA
         , WaterbodyName = LakeName
         , WaterbodyType = LakeType
         , Latitude = Lat
         , Longitude = Long
         , SampleDate = Date
         , WaterbodyArea = LakeArea_sqKm
         , Area_Unit = Area_Unit
         , Result_Value = value)

## df_LAGOSNE ####
df_LAGOSNE_rename <- df_LAGOSNE_trim2 %>% 
  rename(UniqueID = Tt_UniqueID
         , ActivityID = eventida10873
         , StationID = lagoslakeid
         , WaterbodyName = lagosname1
         , Latitude = nhd_lat
         , Longitude = nhd_long
         , SampleDate = sampledate
         , Depth_Max = maxdepth
         , Result_Value = Value
         , QC_Flag = QC_Flag_Tt)

## df_Res2014 ####
# df_Res2014_rename <- df_Res2014_trim %>% 
#   rename(UniqueID = SampleID
#          , ActivityID = Tt_ActivityID
#          , WaterbodyName = Waterbody
#          , Unit = Units
#          , Parameter = Analyte
#          , Result_Value = Result)
# 
# ## df_Res2019 ####
# df_Res2019_rename <- df_Res2019_trim %>% 
#   rename(UniqueID = SampleID
#          , ActivityID = Tt_ActivityID
#          , WaterbodyName = Waterbody
#          , Unit = Units
#          , Parameter = Analyte
#          , Result_Value = Result
#          , QC_Flag = QC_Flag_Tt)


# add missing columns as blanks ####
col.req <- c("UniqueID"
             ,"ActivityID"
             ,"StationID"
             ,"WaterbodyName"
             ,"WaterbodyType"
             ,"Latitude"
             ,"Longitude"
             ,"SampleDate"
             ,"Depth_Max"
             ,"Depth_Sample"
             ,"Depth_SampleStart"
             ,"Depth_SampleEnd"
             ,"Depth_Secchi"
             ,"Depth_Unit"
             ,"WaterbodyArea"
             ,"Area_Unit"
             ,"Unit"
             ,"Parameter"
             ,"Fraction"
             ,"Result_Value"
             ,"QC_Flag")

## df_discrete ####
# col.req.missing <- col.req[!(col.req %in% names(df_discrete_rename))]
# df_discrete_rename[,col.req.missing] <- NA # add missing columns as NA

## df_labmain ####
col.req.missing <- col.req[!(col.req %in% names(df_labmain_rename))]
df_labmain_rename[,col.req.missing] <- NA # add missing columns as NA

## df_WRATS ####
col.req.missing <- col.req[!(col.req %in% names(df_WRATS_rename))]
df_WRATS_rename[,col.req.missing] <- NA # add missing columns as NA

## df_WQP ####
col.req.missing <- col.req[!(col.req %in% names(df_WQP_rename))]
df_WQP_rename[,col.req.missing] <- NA # add missing columns as NA

## df_NLA ####
col.req.missing <- col.req[!(col.req %in% names(df_NLA_rename))]
df_NLA_rename[,col.req.missing] <- NA # add missing columns as NA

## df_LAGOSNE ####
col.req.missing <- col.req[!(col.req %in% names(df_LAGOSNE_rename))]
df_LAGOSNE_rename[,col.req.missing] <- NA # add missing columns as NA

## df_Res2014 ####
# col.req.missing <- col.req[!(col.req %in% names(df_Res2014_rename))]
# df_Res2014_rename[,col.req.missing] <- NA # add missing columns as NA
# 
# ## df_Res2019 ####
# col.req.missing <- col.req[!(col.req %in% names(df_Res2019_rename))]
# df_Res2019_rename[,col.req.missing] <- NA # add missing columns as NA


# add dataset field ####
# df_discrete_rename$Dataset <- "MA_Discrete"
# df_probe_trim <- df_probe_trim %>% 
#   mutate(Dataset2 = case_when((Dataset == "MA_ProbeData") ~ "MA_Probe"
#                                , (Dataset == "MA_Res2014") ~ "MA_Probe"
#                                , (Dataset == "MA_Res2019") ~ "MA_Probe"
#                                , (Dataset == "NLA_2007") ~ "NLA_Probe"
#                                , (Dataset == "NLA_2012") ~ "NLA_Probe"
#                                , (Dataset == "NLA_2017") ~ "NLA_Probe"
#                                , (is.na(Dataset) ~ "MA_Probe"))) %>% 
#   select(-c(Dataset)) %>% 
#   rename(Dataset = Dataset2)

df_labmain_rename$Dataset <- "MA_LabMain"
df_WRATS_rename$Dataset <- "MA_WRATS"
df_WQP_rename$Dataset <- "WQP"
df_NLA_rename$Dataset <- "NLA"
df_LAGOSNE_rename$Dataset <- "LAGOSNE"
# df_Res2014_rename$Dataset <- "MA_Res2014"
# df_Res2019_rename$Dataset <- "MA_Res2019"

# compile data ####
df_combined <- rbind(df_labmain_rename, df_WRATS_rename
                     , df_WQP_rename, df_NLA_rename, df_LAGOSNE_rename)

df_combined <- df_combined %>% # reorder fields
  select(Dataset
         ,UniqueID
         ,ActivityID
         ,StationID
         ,WaterbodyName
         ,WaterbodyType
         ,Latitude
         ,Longitude
         ,SampleDate
         ,Depth_Max
         ,Depth_Sample
         ,Depth_SampleStart
         ,Depth_SampleEnd
         ,Depth_Secchi
         ,Depth_Unit
         ,WaterbodyArea
         ,Area_Unit
         ,Parameter
         ,Result_Value
         ,Unit
         ,Fraction
         ,QC_Flag)

# remove NA values in Result_Value field ####
# NA values due to samples being excluded due to flags. See notes.

df_combined2 <- df_combined %>% 
  filter(!is.na(Result_Value))

# Export Unique Parameters ####
# df_units <- df_combined2 %>% # reorder fields
#   select(Dataset
#          ,Parameter
#          ,Unit
#          ,Fraction) %>% 
#   count(Dataset
#         ,Parameter
#         ,Unit
#         ,Fraction)
# 
# write.table(df_units, file.path(wd, output.dir, results.dir
#                                     , paste0("MA_WQ_Lake_Units_", myDate,".csv"))
#             , sep = ",", row.names = FALSE, col.names = TRUE, na = "")

# Match QC'ed parameters ####
df_combined3 <- left_join(df_combined2, df_LakeUnits,
                          by = c("Dataset" = "Dataset"
                                 , "Parameter" = "Parameter"
                                 , "Unit" = "Unit"
                                 , "Fraction" = "Fraction")) %>% 
  select(-c(`Num_Samples`))

# Filter dataset ####
# remove any instances of incorrect units or unneccessary parameters

df_combined3 <- df_combined3 %>% 
  filter(Retain == "Yes")

# Harmonize Result_Value field ####
df_combined3$Result_Value_Num <- as.numeric(df_combined3$Result_Value)

df_combined4 <- df_combined3 %>% 
  mutate(Result_Value_new = case_when(
    (Unit_Change == "Yes" & Parameter_New == "Alkalinity" & Unit == "mg/L as CaCO3") ~ (33.328*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "Alkalinity" & Unit == "mg/l as CaCO3") ~ (33.328*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "Alkalinity" & Unit == "mg/l") ~ (33.328*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "Aluminum" & Unit == "mg/l") ~ (1000*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "Chloride" & Unit == "umol") ~ (0.035453*Result_Value_Num)
    # ,(Unit_Change == "Yes" & Parameter_New == "Conductivity" & Unit == "mS/cm") ~ (1000*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "Depth" & Unit == "ft") ~ (Result_Value_Num/3.281)
    ,(Unit_Change == "Yes" & Parameter_New == "Depth_Bottom" & Unit == "ft") ~ (Result_Value_Num/3.281)
    ,(Unit_Change == "Yes" & Parameter_New == "DKN" & Unit == "ug/L as N") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "Iron" & Unit == "mg/l") ~ (1000*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "Manganese" & Unit == "mg/l") ~ (1000*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "NH3" & Unit == "ug/L as N") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "NH4" & Unit == "umol as NH4") ~ (0.01804*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "NO2" & Unit == "ug/L as N") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "NO3" & Unit == "umol as N") ~ (0.014007*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "NO3NO2" & Unit == "ug/L as N") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "NO3NO2" & Unit == "umol as N") ~ (0.014007*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "SRP" & Unit == "ug/L as P") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "SRP" & Unit == "umol as PO4") ~ (0.094971*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "TDN" & Unit == "ug/L as N") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "TDP" & Unit == "ug/L as P") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "TDS" & Unit == "g/l") ~ (1000*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "Temperature_Air" & Unit == "deg F") ~ ((5/9)*(Result_Value_Num-32))
    ,(Unit_Change == "Yes" & Parameter_New == "Temperature_Water" & Unit == "deg F") ~ ((5/9)*(Result_Value_Num-32))
    ,(Unit_Change == "Yes" & Parameter_New == "TKN" & Unit == "ug/L as N") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "TN" & Unit == "ug/L as N") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "TN" & Unit == "umol as N") ~ (0.014007*Result_Value_Num)
    ,(Unit_Change == "Yes" & Parameter_New == "TON" & Unit == "ug/L as N") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "TP" & Unit == "ug/L as P") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "TP" & Unit == "ug/l") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "TP" & Unit == "ug/l as P") ~ (Result_Value_Num/1000)
    ,(Unit_Change == "Yes" & Parameter_New == "TP" & Unit == "umol as P") ~ (0.030974*Result_Value_Num)
    ,(Unit_Change == "No") ~ (Result_Value_Num)
  ))

# Trim dataset ####
df_combined4 <- df_combined4 %>%
  mutate(Retain = case_when((Result_Value_new == 0 & Parameter_New != "Light_Attenuation_atDepth") ~ "No"
                            ,(Result_Value_new == 0 & Parameter_New == "Light_Attenuation_atDepth") ~ "Yes"
                            ,(Result_Value_new != 0) ~ "Yes")) %>%
  filter(Retain == "Yes") %>% 
  select(-c(Result_Value_Num, Result_Value, Unit, Fraction, Parameter
            , Unit_Change, Conversion_Notes, Retain)) %>% 
  rename(Parameter = Parameter_New
         , Unit = Unit_New
         , Fraction = Fraction_new
         , Result_Value = Result_Value_new)

# # Join COMID data ####
# df_COMIDs2 <- df_COMIDs %>% 
#   select(StationID, WaterbodyID, Retain, COMID_Final, US_L4CODE, US_L3CODE
#          , AREASQKM)
# 
# df_combined5 <- left_join(df_combined4, df_COMIDs2, by = "StationID") %>% 
#   select(Dataset, WaterbodyID, COMID_Final, Retain, StationID, UniqueID
#          , ActivityID, everything()) %>% 
#   mutate(WaterbodyArea2 = case_when((!is.na(WaterbodyArea))~ WaterbodyArea
#                                     , (is.na(WaterbodyArea))~ AREASQKM)) %>% 
#   select(-c(WaterbodyArea, AREASQKM)) %>% 
#   rename(WaterbodyArea_km2 = WaterbodyArea2)

# # Remove sites that should not be included ####
# # Based on GIS analysis - see COMID 'Notes' field
# df_combined6 <- df_combined5 %>% 
#   filter(Retain == "Yes") %>% 
#   select(-c(Retain))

# Density plots for outliers ####
params <- unique(df_combined4$Parameter)
plot_list = list()
counter <- 1

for (i in params){
  loop.data <- df_combined4 %>% 
    filter(Parameter == i)
  
  (p <- ggplot(loop.data, aes(x = Result_Value))+
      geom_density(fill="#c2e699", color="black", alpha=0.8)+
      scale_x_log10()+
      labs(x = i, title = paste0("n= ", nrow(loop.data)))+
      theme_classic())
  
  plot_list[[counter]] <- p
  counter <- counter +1
}

#### print plots
pdf(file = file.path(wd, output.dir, results.dir
                     ,paste0("MA_Lake_WQ_Distribution_Plots"
                             , Sys.Date(),".pdf")))
for (i in 1:length(params)) {
  print(plot_list[[i]])
}
dev.off()

# # Create Depth_Type field ####
# df_combined6 <- df_combined6 %>% 
#   mutate(Depth_Type = case_when((!is.na(Depth_SampleStart) & !is.na(Depth_SampleEnd)) ~ "Integrated_Sample"
#                                 , (!is.na(Depth_SampleStart) & is.na(Depth_SampleEnd)) ~ "Surface_Sample"
#                                 , (is.na(Depth_SampleStart) & is.na(Depth_SampleEnd)
#                                    & is.na(Depth_Sample)) ~ "Surface_Sample"
#                                 , (Depth_Sample <=1) ~ "Surface_Sample"
#                                 , (Depth_Sample >1) ~ "Deep_Sample"))

# SiteDate dataset ####
df_trim1 <- df_combined4 %>% 
  mutate(Param_Unit = paste0(Parameter, "_", Unit)) %>%
  select(Dataset, StationID, WaterbodyName, WaterbodyType
         , Latitude, Longitude, SampleDate, Depth_Max, Depth_Secchi
         , Depth_Sample, Depth_SampleStart, Depth_SampleEnd, Depth_Unit
         , WaterbodyArea, Param_Unit, Result_Value) %>% 
  group_by(Dataset, StationID, WaterbodyName, WaterbodyType
        , Latitude, Longitude, SampleDate, Depth_Max, Depth_Secchi
        , Depth_Sample, Depth_SampleStart, Depth_SampleEnd, Depth_Unit
        , WaterbodyArea, Param_Unit) %>%
  summarize(Mean_Result_Value = round(mean(Result_Value),6))

# make dataset wide ####
df_wide1 <- df_trim1 %>% 
  pivot_wider(names_from = "Param_Unit", values_from = "Mean_Result_Value")

# Join probe data ####
df_wide2 <- full_join(df_wide1, df_probe_trim, by = c("StationID" = "StationID"
                                                      , "SampleDate" = "SampleDate")) %>%
  ungroup() %>% 
  select(-c(Latitude, Longitude))

# Join COMID data ####
df_COMIDs2 <- df_COMIDs %>% 
  select(StationID, WaterbodyID, Retain, COMID_Final, US_L4CODE, US_L3CODE
         , AREASQKM, Latitude, Longitude)

df_wide3 <- left_join(df_wide2, df_COMIDs2, by = "StationID") %>%
  ungroup() %>% 
  select(Dataset, WaterbodyID, COMID_Final, Retain, StationID, everything()) %>% 
  mutate(WaterbodyArea2 = case_when((!is.na(WaterbodyArea))~ WaterbodyArea
                                    , (is.na(WaterbodyArea))~ AREASQKM)) %>% 
  select(-c(WaterbodyArea, AREASQKM)) %>% 
  rename(WaterbodyArea_km2 = WaterbodyArea2)

# Remove sites that should not be included ####
# Based on GIS analysis - see COMID 'Notes' field
df_wide4 <- df_wide3 %>% 
  filter(Retain == "Yes") %>% 
  select(-c(Retain))

# Create Depth_Type field ####
df_wide4 <- df_wide4 %>% 
  mutate(Depth_Type = case_when((!is.na(Depth_SampleStart) & !is.na(Depth_SampleEnd)
                                    & !is.na(maxprofiledepth)) ~ "Integrated_and_Profile_Sample"
                                ,(!is.na(Depth_SampleStart) & !is.na(Depth_SampleEnd)
                                  & is.na(maxprofiledepth)) ~ "Integrated_Sample"
                                , (!is.na(Depth_SampleStart) & is.na(Depth_SampleEnd)
                                   & !is.na(maxprofiledepth)) ~ "Surface_and_Profile_Sample"
                                , (!is.na(Depth_SampleStart) & is.na(Depth_SampleEnd)
                                   & is.na(maxprofiledepth)) ~ "Surface_Sample"
                                , (is.na(Depth_SampleStart) & is.na(Depth_SampleEnd)
                                   & is.na(Depth_Sample) 
                                   & !is.na(maxprofiledepth)) ~ "Surface_and_Profile_Sample"
                                , (is.na(Depth_SampleStart) & is.na(Depth_SampleEnd)
                                   & is.na(Depth_Sample) 
                                   & is.na(maxprofiledepth)) ~ "Surface_Sample"
                                , (Depth_Sample <=1 
                                   & !is.na(maxprofiledepth)) ~ "Surface_and_Profile_Sample"
                                , (Depth_Sample <=1 
                                   & is.na(maxprofiledepth)) ~ "Surface_Sample"
                                , (Depth_Sample >1
                                   & !is.na(maxprofiledepth)) ~ "Deep_and_Profile_Sample"
                                , (Depth_Sample >1
                                   & is.na(maxprofiledepth)) ~ "Deep_Sample"))


# order dataset ####
df_wide4 <- df_wide4[,order(colnames(df_wide4))]

# join LakeCat and disturbance designations ####
df_wide5 <- left_join(df_wide4, df_DistCat
                      , by = c("COMID_Final" = "COMID"))

# reorder dataset ####
df_wide6 <- df_wide5 %>% 
  select(Dataset, WaterbodyID, COMID_Final, StationID, DistCat, WaterbodyName
         , WaterbodyType, WaterbodyArea_km2, US_L3CODE, US_L4CODE, Latitude
         , Longitude, SampleDate, Depth_Type, Depth_Max, LakeMaxDepth_m, maxdepth
         , Depth_Secchi, Secchi_Depth_m, Depth_Sample,Depth_SampleStart
         , Depth_SampleEnd, maxprofiledepth, thermocline, Depth_Unit
         , everything()) %>% 
  rename(Turbidity_NTU = Turbidity_NTU_NTU)

# fill in data gaps
df_wide6 <- df_wide6 %>% 
  mutate(Dataset = case_when((!is.na(Dataset)) ~ Dataset
                             , (is.na(Dataset) & !is.na(maxdepth)) ~ "MA_Probe"))


# create temperature classes from probe data - need WaterbodyID
Station_waterbody <- df_wide6 %>% 
  select(WaterbodyID, StationID) %>% 
  distinct(.)

ProbeTempClasses <- df_probedata %>% 
  select(StationID, Month, Temp_min_C) %>% 
  filter(Month >= 6 & Month <= 9)

ProbeTempClasses2 <- left_join(ProbeTempClasses, Station_waterbody
                               , by = "StationID")

ProbeTempClasses3 <- ProbeTempClasses2 %>% 
  group_by(WaterbodyID) %>% 
  summarize(Temp_min_summer_C = max(Temp_min_C)) %>% 
  mutate(ThermalRegime = case_when((Temp_min_summer_C <= 12.8) ~ "Very_Cold"
                               , (Temp_min_summer_C > 12.8
                                  & Temp_min_summer_C <= 18) ~ "Cold"
                               , (Temp_min_summer_C > 18
                                  & Temp_min_summer_C <= 21) ~ "Cool"
                               , (Temp_min_summer_C > 21) ~ "Warm")) %>% 
  select(-c(Temp_min_summer_C))

df_wide7 <- left_join(df_wide6, ProbeTempClasses3
                      , by = "WaterbodyID")


ProbeTempClasses <- df_probedata %>% 
  select(StationID, Month, Temp_min_C) %>% 
  filter(Month >= 6 & Month <= 9)%>% 
  group_by(WaterbodyID) %>% 
  summarize(Temp_min_summer_C = max(Temp_min_C)) %>% 
  mutate(ThermalRegime = case_when((Temp_min_summer_C <= 12.8) ~ "Very_Cold"
                                   , (Temp_min_summer_C > 12.8
                                      & Temp_min_summer_C <= 18) ~ "Cold"
                                   , (Temp_min_summer_C > 18
                                      & Temp_min_summer_C <= 21) ~ "Cool"
                                   , (Temp_min_summer_C > 21) ~ "Warm"))

# Add waterbody type fields
df_WaterbodyType_trim <- df_WaterbodyType %>% 
  filter(is.na(Notes)) %>% 
  select(WaterbodyID, DistCat_Final, WaterbodyType_Final) %>% 
  mutate(Keep_Waterbody = "Yes")

df_wide8 <- left_join(df_wide7, df_WaterbodyType_trim, by = "WaterbodyID") %>% 
  filter(Keep_Waterbody == "Yes") %>% 
  select(-c(Keep_Waterbody, WaterbodyType, DistCat)) %>% 
  rename(DistCat = DistCat_Final, WaterbodyType = WaterbodyType_Final)

# Depth updates
df_wide8$Depth_Max <- as.numeric(df_wide8$Depth_Max)
df_wide8$Depth_Secchi <- as.numeric(df_wide8$Depth_Secchi)

MaxDepth <- df_wide8 %>%
  select(WaterbodyID, Depth_Max, LakeMaxDepth_m, maxdepth, maxprofiledepth) %>% 
  mutate(maxprofiledepth2 = maxprofiledepth +0.5) %>% 
  select(-c(maxprofiledepth)) %>% 
  rename(maxprofiledepth = maxprofiledepth2) %>% 
  pivot_longer(!c(WaterbodyID), names_to = "MaxDepthSrc", values_to = "MaxDepthValue") %>%
  filter(!is.na(MaxDepthValue)) %>%
  group_by(WaterbodyID) %>% 
  summarize(Depth_Max_Final = max(MaxDepthValue)) %>% 
  filter(Depth_Max_Final >0)

df_wide9 <- left_join(df_wide8, MaxDepth, by = "WaterbodyID")

# classes and such
df_wide10 <- df_wide9 %>%
  mutate(WaterbodyArea_m2 = WaterbodyArea_km2 * 1000000
         , Geometric_Ratio = (WaterbodyArea_m2^0.25)/Depth_Max_Final) %>% 
  mutate(MixingRegime = case_when((Geometric_Ratio <3) ~ "Dimictic"
                                 , (Geometric_Ratio >5) ~ "Polymictic"
                                 , (Geometric_Ratio >=3 & Geometric_Ratio <=5)
                                 ~ "Intermediate")) %>% 
  mutate(Drainage_Ratio = WsAreaSqKm/WaterbodyArea_km2
         , Depth_Below_Thermo = Depth_Max_Final - thermocline) %>%
  select(-c(WaterbodyArea_m2, Depth_Max, LakeMaxDepth_m, maxdepth))

# Reorder columns
df_wide11 <- df_wide10 %>% 
  select(Dataset, WaterbodyID, COMID_Final, StationID, SampleDate, DistCat, WaterbodyName
         , US_L3CODE, US_L4CODE, Latitude, Longitude
         , WaterbodyType, ThermalRegime, MixingRegime, WaterbodyArea_km2, Geometric_Ratio, Drainage_Ratio
         , Depth_Type, Depth_Max_Final, Depth_Secchi, Secchi_Depth_m, Depth_Sample, Depth_SampleStart
         , Depth_SampleEnd, maxprofiledepth, thermocline, Depth_Below_Thermo, Depth_Unit
         , everything())


# Export data ####
write.table(df_wide11, file.path(wd, output.dir, results.dir
                                    , paste0("MA_WQ_Lakes_Compiled_", myDate,".csv"))
            , sep = ",", row.names = FALSE, col.names = TRUE, na = "")
